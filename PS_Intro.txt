PowerShell is a tool that's much more powerful than the Command Prompt . I n a way, it 's also intended to replace the Command Prompt , as it delivers more power and control over the Windows operating system.

It's purpose is task automation and configuration management . This powerful shell is based on the .NET framework and it includes a command-line shell and a scripting language.

You can execute commands as scripts without typing commands in individually for tedious administration tasks.


e.g. if you are managing a large network of servers, you can automatically install updates and make changes with powershell instead of individually connecting to each server.
it's supposed to be really fast too.

Windows Powershell ISE = integrated scripting environment

Everything in Windows PowerShell is an object. $var = "Hello" is an object of type System.String. $var | Get-Member
$svc = Get-Service
$svc[0].name

Hundreds of customizable commands, which are called cmdlets.
Cmdlet is a lightweight command that is used in the PowerShell environment and it performs a single function. It's a command from a user to computer's OS or an application, such as: "show all my files", or "run this program". There are over 200 basic cmdlets included in PS. and you can write your own ones.
It's a verb-noun pair.
Each cmdlet has a help: 
e.g Get-Help Copy-Item -Detailed

example cmdlets:
Get-Location - get the current directory
Copy-Item - copy files
Move-Item - move a file
New-Item - creates a new empty file or directory
Remove-Module -Name "CsvSqlimport"
Get-ChildItem - Gets the files and folders in a file system drive.

https://docs.microsoft.com/en-us/previous-versions/technet-magazine/hh551144(v=msdn.10)

if, do while, foreach,Switch, For constructions

If ($this -eq $that) {
  # commands
} elseif ($those -ne $them) {
  # commands
} elseif ($we -gt $they) {
  # commands
} else {
  # commands
}


Functions:

function Mine {
  Get-Service
  Get-Process
}
Mine

Functions can themselves contain other functions.

Scripts and modules
what's the between .ps1 and .psm1?

PS1 files are scripts, PSM1 files are script modules (related scripts)
You load up a module with the Import-Module command, and it has some other advantages over scripts, such as the ability to keep some code internal while exporting other commands, to manage scoping of variables and aliases. Scripts, on the other hand, are just executed (or dot-sourced, if your intention is to load the contents of the script into your current session.)

If you save the script as .psm1 then you can can use the module cmdlets such as Import-Module on it. So that you can easily install your code into other user's systems and manage scoping.
You save the .psm1 file in a directory and you can also put any resources you need to run your script in that folder + a manifest file that describes how the module works.
All functons in your .psm1 script will be accessible to all users who import your .psm1. but properties will not be.


There are also binary modules(.ddls (binary modules  that contain compiled code such as c#), manifest moduels, dynamic modules.
Dynamic modules are not loaded from or saved to a file. They are created dynamicaly by a script using the New-Module cmdlet

Dot-Sourcing - to load your ps script into active memory (variables will be in scope). The variables will be maintained in your current session post-script execution.  show example.

. .\scriptname.ps1

 .\script.ps1

You can easily test this. Save the following as script.ps1:

$answer="42"
write-output "ultimate answer is $answer"
Now see example execution:

PS D:\temp> .\script.ps1
ultimate answer is 42

PS D:\temp> $answer

PS D:\temp> . .\script.ps1
ultimate answer is 42

PS D:\temp> $answer
42

cd E:\GIT\DataProjects\_SharedScripts\NEW\ToInit_V8\Import\CSV
. .\LoadCsvTosql.ps1

Parameters are defined in a special way at the top of the script. You can precede this definition with comments, but it must otherwise be the first executable lines of code within the script. 

param (
  [string]$computername,
  [string]$logfile,
  [int]$attemptcount = 5
)

in Chrissy's example - this means the parameter after the Mandatory keyword is mandatory:

	[Parameter(Mandatory=$true)]
		[string]$SqlServer,

To create a parameter set, I use the [Parameter(ParameterSetName='somename')] syntax.

A PowerShell function can have different parameters depending on how it is called. This is called Parameter Sets. For example, Get-Process has a non mandatory parameter called Name which specifies which processes to Get by Name. But is also has a parameter called ID which also specifies which processes to get, this time by ID. Both parameters exists but are mutually exclusive, you cannot use them both at the same time, since they are defined in two different Parameter Sets.

to view parameter sets:
Get-Command Import-CsvToSql -Syntax

CmdletBinding
The CmdletBinding and the Parameter attribute turn a simple function into an advanced function, thereby adding features that are common in cmdlets. H

Chrissy solution - various problems with loading our existing csv files.
Some work fine. 
But e.g. fails for: trailing empty columns (Document.csv)
apostropies such as Agnes O'Hara in row 167
Can be fixed (hopefully)

Currently inserts all text with quotes. can be fixed.

some don't parese correctly, so can use -Safe option, but that's slower, as it uses OLEDB connection not streamreader. Runs too slowly.
Turbo - uses tablelock, but has restrictions.works for certain data only.

